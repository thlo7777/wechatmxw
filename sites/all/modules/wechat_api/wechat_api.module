<?php

define('MENU_WECHAT_API_ADMIN', 'menu-wechat-api-admin');
/**
 * hook_permission()
 */
function wechat_api_permission() {
  return array(
    'wechat api manage module permission' => array(
      'title' => t('Access wechat api module'),
      'description' => t('访问wechat api 管理模块'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function wechat_api_menu(){
  
  //wechat server url for acess entrance
  $items['wechat-access-py'] = array(
    'type' => MENU_CALLBACK,
    'title' => '微信接入地址',
    'page callback' => 'menu_wechat_access_py_url',
    'access callback' => TRUE, //should return true for everyone to access wechat server entrance. 
    'file' => 'wechat_access_url_py.inc',
  );

  $items['wechat-api/manage'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API管理主页面',
    'page callback' => 'menu_wechat_api_manage_form',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'expanded' => TRUE,
    'weight' => 0,
  );

  $items['wechat-api/manage/encrypt'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '加密解密字符串',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_encrypt_form'),
    'description' => '使用Encryption module 加/解密字符串',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 1,
    'file' => 'wechat_api_manage_encrypt.inc',
  );

  $items['wechat-api/manage/appid'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API管理应用ID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_appid_form'),
    'description' => '微信API基本信息表.',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 1,
    'file' => 'wechat_api_manage_appid.inc',
  );


  $items['wechat-api/manage/url-requests'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API 消息接口列表',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_urlreq_form'),
    'description' => '微信API消息接口列表.',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 2,
    'file' => 'wechat_api_manage_urlreq.inc',
  );

  $items['wechat-api/manage/test-api'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API接口测试',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_test_api_form'),
    'description' => '微信api 接口测试',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 3,
    'file' => 'wechat_api_manage_test_api.inc',
  );

  $items['wechat-api/manage/menu'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API 菜单管理',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_menu_form'),
    'description' => '微信API管理菜单.',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 4,
    'file' => 'wechat_api_manage_menu.inc',
  );

  $items['wechat-api/manage/recv-message'] = array(
    'menu_name' => MENU_DLD_ADMIN_PATH,
    'title' => '微信API 消息接收回调',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_wechat_api_manage_recv_msg_form'),
    'description' => '微信API接收到的消息处理函数.',
    'access callback' => 'user_access',
    'access arguments' => array('wechat api manage module permission'),
    'weight' => 4,
    'file' => 'wechat_api_manage_recv_msg.inc',
  );
  return $items;
}

/**
 * wechat api mange callback page function
 */
function menu_wechat_api_manage_form(){
  //$render_array = array();
  //dpm(drupal_get_destination());
  $render_array = array(
    '#markup' => t(
    '欢迎进入微信API管理页面'),
  );

  return $render_array;
}

/**
 * Implements hook_theme($existing, $type, $theme, $path).
 */

/**
 * Implements hook_cron().
 * use crontab -e
 * put a line
 * 0 * * * * curl -s http://wechatsd.dreamland360.com/cron.php?cron_key=xxxx. cron_key generated by drupal
 */
function wechat_api_cron() {
  //watchdog('wechat_api_cron', 'wechat_api_cron ran');
  $queue = DrupalQueue::get('wechat_get_access_token_queue');
  $queue->createItem('wechat_get_access_token_queue');
}
/**
 * Implements hook_cron_queue_info().
 *
 * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 * process to add work to the queue to be acted on when cron runs. Queues are
 * described and worker callbacks are provided, and then only the worker
 * callback needs to be implemented.
 *
 * All the details of queue use are done by the cron_queue implementation, so
 * one doesn't need to know much about DrupalQueue().
 *
 * @see queue_example.module
 */
function wechat_api_cron_queue_info() {
  $queues['wechat_get_access_token_queue'] = array(
    'worker callback' => 'wechat_get_access_token_queue_worker',
    'time' => 30,
  );

  return $queues;
}

/**
 * cron worker callback for wechat access token queues.
 *
 * @param object $item
 *   Any object to be worked on.
 */
function wechat_get_access_token_queue_worker($item) {
  get_access_token();
  get_jsapi_ticket();
}

function get_access_token() {
  module_load_include('inc', 'wechat_api', 'wechat_api_php5');
  
  $token_url = t(
    variable_get('get access token'),
    array(
      '@APPID' => variable_get('wechat_py_AppID'),
      '@APPSECRET' => variable_get('wechat_py_AppSecret'),
    )
  );

  //watchdog('wechat access token', '@token_url', array('@token_url' => $token_url));

  $result = wechat_php_curl_https_get($token_url);
  if (!$result)
  {
    watchdog('wechat access token', 'get access token error in @line line:@filename',
      array(
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $errcode = 'errcode';
  $pos = strpos($result, $errcode);  
  if ($pos !== false) //Find errorcode, wechat return error code
  {
    watchdog('wechat access token', 'error code: @error at @line in @filename',
      array(
      '@error' => $result,
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $json_data = json_decode($result);
  variable_set('access_token', $json_data->access_token);
  //watchdog('wechat access token', '@access_token', array('@access_token' => $json_data->access_token));
  //watchdog('wechat access token', 'heartbeat for wechat access token: @access_token', array('@access_token' => $json_data->access_token));
}

function get_jsapi_ticket() {
  module_load_include('inc', 'wechat_api', 'wechat_api_php5');
  $jsapi_ticket_url = t(
    variable_get('get jsapi ticket'),
    array(
      '@ACCESS_TOKEN' => variable_get('access_token'),
    )
  );

  $result = wechat_php_curl_https_get($jsapi_ticket_url);
  if (!$result)
  {
    watchdog('wechat jsapi ticket', 'get jsapi ticket error in @line line:@filename',
      array(
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $json_data = json_decode($result);

  if($json_data->errcode != 0) {
    watchdog('wechat jsapi ticket', 'error code: @error at @line in @filename',
      array(
      '@error' => $result,
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  variable_set('jsapi_ticket', $json_data->ticket);
  //watchdog('wechat jsapi ticket', 'heartbeat for wechat jsapi ticket');
}


/**
 * Implements hook_libraries_info(). for wechat pay api library
 */
function wechat_api_libraries_info() {
    // This array key lets Libraries API search for 'sites/all/libraries/wxpayapi'
    // directory, which should contain the entire, original extracted library.
    $libraries['wxpayapi'] = array (
        'name' => 'wechat pay api php interface',
        'version arguments' => array (
            'file' => 'README.txt',
            'pattern' => '@Version ([0-9a-zA-Z\.-]+)@',
            'lines' => 3
        ),

        'files' => array (
            // For PHP libraries, specify include files here, still relative to the
            // library path.
            'php' => array (
                'WxPay.JsApiPay.php',
                'lib/WxPay.Api.php',
                'lib/WxPay.Exception.php',
                'lib/WxPay.Config.php',
                'lib/WxPay.Data.php',
                'phpqrcode/phpqrcode.php',
            ),
        ),
    );

    return $libraries;
}

/**
 * End of wechat api module
 */
