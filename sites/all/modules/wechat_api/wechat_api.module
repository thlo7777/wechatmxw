<?php
require_once dirname(__FILE__) . "/wechat_api_php5.inc";

/**
 * hook_permission()
 */
function wechat_api_permission() {
  return array(
    'wechat api manage module permission' => array(
      'title' => t('Access wechat api module'),
      'description' => t('访问wechat api 管理模块'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function wechat_api_menu(){
  
  //wechat server url for acess entrance
  $items['wechat-access-url'] = array(
    'type' => MENU_CALLBACK,
    'title' => '微信接入地址',
    'page callback' => 'menu_wechat_access_url',
    'access callback' => TRUE, //should return true for everyone to access wechat server entrance. 
    'file' => 'wechat_access_url.inc',
  );

  return $items;
}


/**
 * Implements hook_node_presave() 
 **/
function wechat_api_node_presave($node) {

    global $user, $base_url;

    //save wechat api interface to variable cache 
    if ($node->type == 'wechat_api_interface') {
        //watchdog('wechat_api_node_update', 'node <pre>@data</pre>', array('@data' => print_r($node, TRUE)), WATCHDOG_DEBUG);
        $nodeWrapper = entity_metadata_wrapper('node', $node);
        $detail = $nodeWrapper->field_wechat_api_ref->value();
        foreach ($detail as $ref_obj) {
            $node_w = entity_metadata_wrapper('node', $ref_obj->nid);
            variable_set($node_w->title->value(), $node_w->field_api_url->value());
        }
    }

    //save wechat config to node 
    if ($node->type == 'wechat_server_configure') {

        $nodeWrapper = entity_metadata_wrapper('node', $node);

        variable_set('wechat_Token', $nodeWrapper->field_wechat_token->value());
        variable_set('wechat_AppID', $nodeWrapper->field_appid->value());
        variable_set('wechat_AppSecret', $nodeWrapper->field_appsecret->value());
        $node->field_access_token['und'][0]['value'] = variable_get('access_token', 'empty');
        $node->field_js_api_ticket['und'][0]['value'] = variable_get('jsapi_ticket', 'empty');
        //do not use entity save in this hook
//        $nodeWrapper->field_access_token->set(variable_get('access_token', 'empty'));
//        $nodeWrapper->field_js_api_ticket->set(variable_get('jsapi_ticket', 'empty'));
//        $nodeWrapper->save();

    }

    //save recv message to variable cache
    if ($node->type == 'wechat_recv_msg') {
        //watchdog('wechat_api_node_update', 'node <pre>@data</pre>', array('@data' => print_r($node, TRUE)), WATCHDOG_DEBUG);
        $nodeWrapper = entity_metadata_wrapper('node', $node);
        $detail = $nodeWrapper->field_recv_msg_ref->value();

        $recv_msg = array();
        foreach ($detail as $ref_obj) {
            $node_w = entity_metadata_wrapper('node', $ref_obj->nid);

            if($node_w->field_evet_type->value() === ''){
                $recv_msg[$node_w->title->value()] = $node_w->field_recv_msg_callback->value();
            }else{
                $recv_msg[$node_w->title->value()][$node_w->field_evet_type->value()] = $node_w->field_recv_msg_callback->value();
            }

        }

        variable_set('wechat_recv_msg', $recv_msg);
    }

    //create menu for wechat
    if ($node->type == 'wechat_menu') {

        $wrapper = entity_metadata_wrapper('node', $node);
        $menu = $wrapper->body->value();
        if ( wechat_api_create_custom_menu($menu) ) {
            drupal_set_message(t('创建菜单成功!'), 'status');
        } else {
            drupal_set_message(t('创建菜单失败!'), 'error');
        }
    }

}

/**
 * Implements hook_cron().
 * use crontab -e
 * put a line
 * 0 * * * * curl -s http://wechatsd.dreamland360.com/cron.php?cron_key=xxxx. cron_key generated by drupal
 */
function wechat_api_cron() {
  //watchdog('wechat_api_cron', 'wechat_api_cron ran');
  $queue = DrupalQueue::get('wechat_get_access_token_queue');
  $queue->createItem('wechat_get_access_token_queue');
}
/**
 * Implements hook_cron_queue_info().
 *
 * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 * process to add work to the queue to be acted on when cron runs. Queues are
 * described and worker callbacks are provided, and then only the worker
 * callback needs to be implemented.
 *
 * All the details of queue use are done by the cron_queue implementation, so
 * one doesn't need to know much about DrupalQueue().
 *
 * @see queue_example.module
 */
function wechat_api_cron_queue_info() {
  $queues['wechat_get_access_token_queue'] = array(
    'worker callback' => 'wechat_get_access_token_queue_worker',
    'time' => 30,
  );

  return $queues;
}

/**
 * cron worker callback for wechat access token queues.
 *
 * @param object $item
 *   Any object to be worked on.
 */
function wechat_get_access_token_queue_worker($item) {
  get_access_token();
  get_jsapi_ticket();
}

function get_access_token() {
  
  $token_url = t(
    variable_get('get access token'),
    array(
      '@APPID' => variable_get('wechat_AppID'),
      '@APPSECRET' => variable_get('wechat_AppSecret'),
    )
  );

  //watchdog('wechat access token', '@token_url', array('@token_url' => $token_url));

  $result = wechat_php_curl_https_get($token_url);
  if (!$result)
  {
    watchdog('wechat access token', 'get access token error in @line line:@filename',
      array(
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $errcode = 'errcode';
  $pos = strpos($result, $errcode);  
  if ($pos !== false) //Find errorcode, wechat return error code
  {
    watchdog('wechat access token', 'error code: @error at @line in @filename',
      array(
      '@error' => $result,
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $json_data = json_decode($result);
  variable_set('access_token', $json_data->access_token);
  //watchdog('wechat access token', '@access_token', array('@access_token' => $json_data->access_token));
  //watchdog('wechat access token', 'heartbeat for wechat access token: @access_token', array('@access_token' => $json_data->access_token));
}

function get_jsapi_ticket() {

  $jsapi_ticket_url = t(
    variable_get('get jsapi ticket'),
    array(
      '@ACCESS_TOKEN' => variable_get('access_token'),
    )
  );

  $result = wechat_php_curl_https_get($jsapi_ticket_url);
  if (!$result)
  {
    watchdog('wechat jsapi ticket', 'get jsapi ticket error in @line line:@filename',
      array(
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  $json_data = json_decode($result);

  if($json_data->errcode != 0) {
    watchdog('wechat jsapi ticket', 'error code: @error at @line in @filename',
      array(
      '@error' => $result,
      '@line' => __LINE__,
      '@filename' => __FILE__,
      ),
      $severity = WATCHDOG_ERROR);
    return;
  }

  variable_set('jsapi_ticket', $json_data->ticket);
  //watchdog('wechat jsapi ticket', 'heartbeat for wechat jsapi ticket');
}


/**
 * Implements hook_libraries_info(). for wechat pay api library
 */
function wechat_api_libraries_info() {
    // This array key lets Libraries API search for 'sites/all/libraries/wxpayapi'
    // directory, which should contain the entire, original extracted library.
    $libraries['wxpayapi'] = array (
        'name' => 'wechat pay api php interface',
        'version arguments' => array (
            'file' => 'README.txt',
            'pattern' => '@Version ([0-9a-zA-Z\.-]+)@',
            'lines' => 3
        ),

        'files' => array (
            // For PHP libraries, specify include files here, still relative to the
            // library path.
            'php' => array (
                'WxPay.JsApiPay.php',
                'lib/WxPay.Api.php',
                'lib/WxPay.Exception.php',
                'lib/WxPay.Config.php',
                'lib/WxPay.Data.php',
                'phpqrcode/phpqrcode.php',
            ),
        ),
    );

    return $libraries;
}

/**
 * 
 * hook api for create wechat menu
 * @param $menu
 * a json data 
 *
 * @return
 * false or true
 * 
 **/
function wechat_api_create_custom_menu($menu) {
    return $menu;

    $req_url = t(
        variable_get('create menu'), array('@ACCESS_TOKEN' => variable_get('access_token'))
    );

    $result = wechat_php_curl_https_post($req_url, $menu);

    if ( !$result ) {
        watchdog(__FUNCTION__, ' error in @line line:@filename',
            array(
                '@line' => __LINE__,
                '@filename' => __FILE__,
            ),
            $severity = WATCHDOG_ERROR
        );

        return FALSE;
    }

    $json_data = json_decode($result);
    if ( isset($json_data->errcode) && $json_data->errcode != 0 ) {

        watchdog(__FUNCTION__, ' errcode @error and errmsg @errmsg',
            array(
                '@error' => $json_data->errcode,
                '@errmsg' => $json_data->errmsg
            ),
            $severity = WATCHDOG_ERROR
        );

        return FALSE;
    }

    return TRUE;
}

/**
 * module_invoke('wechat_api', 'oauth2_get_accss_token', $parameters);
 * get oauth2 access_token by redirect code, and finished if scope is snsapi_userinfo or snsapi_base
 * paramter:
 * $code: * 用户同意授权后
 * 如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&state=STATE
 * $scope: snsapi_userinfo / snsapi_base
 * $state: any
 * $url: redirect url when error
 * $watchdog_title: page name
 **/

function wechat_api_oauth2_get_accss_token($code, $scope = 'snsapi_base', $state, $url, $watchdog_title) {
  
    if($code == '') {
        return null; 
    }

    $req_url = t(
        variable_get('get oauth2 access_token'),
        array(
        '@APPID' => variable_get('wechat_py_AppID'),
        '@APPSECRET' => variable_get('wechat_py_AppSecret'),
        '@CODE' => $code,
        )
    );

    $result = wechat_php_curl_https_get($req_url);
    if ($result == Null) {
        watchdog($watchdog_title, 'error: get user openid return null in @line line:@filename',
        array(
            '@line' => __LINE__,
            '@filename' => __FILE__,
        ),
        $severity = WATCHDOG_ERROR);
        return null;
    }

    //get user list, it will return maxmum 10000 open id each time.
    $json_value = json_decode($result);
    if(isset($json_value->errcode)){

        global $base_url;
        //if 40029 happend, because browser history store last oauth2 redirect url, and contains old code. so
        //resend oauth2 redirect ulr to this page, then ok. don't forget drupal_exit :)
        if ($json_value->errcode == "40029" && preg_match('/invalid code/', $json_value->errmsg)) {
            watchdog($watchdog_title, 'redirect 40029 error in new tpl');

            $redirect_40029_req_url = t(
                variable_get('oauth2 redirect request'),
                array(
                '@APPID' => variable_get('wechat_py_AppID'),
                '@URL' => $url,
                '@SNSAPI' => $scope,
                '@STATE' => $state,
                )
            );

            drupal_goto($redirect_40029_req_url);
            drupal_exit();
        } else if ($json_value->errcode == "40163" && preg_match('/code been used/', $json_value->errmsg)) {
            //if 40163 happend, same like 40029 
            //resend oauth2 redirect ulr to this page, then ok. don't forget drupal_exit :)
            watchdog($watchdog_title, 'redirect 40163 error in new tpl');

            $redirect_40163_req_url = t(
                variable_get('oauth2 redirect request'),
                array(
                '@APPID' => variable_get('wechat_py_AppID'),
                '@URL' => $url,
                '@SNSAPI' => $scope,
                '@STATE' => $state,
                )
            );

            drupal_goto($redirect_40163_req_url);
            drupal_exit();
        } else {
            watchdog($watchdog_title, 'error code: @error and errmsg: @errmsg at @line in @filename',
                array(
                '@error' => $json_value->errcode,
                '@errmsg' => $json_value->errmsg,
                '@line' => __LINE__,
                '@filename' => __FILE__,
                ),
                $severity = WATCHDOG_ERROR);

            return null;
        }
    }

    if ($scope == 'snsapi_base') {
        //finished it, and only return openid
        //return value
        //{ "access_token":"ACCESS_TOKEN",    
        //"expires_in":7200,    
        //"refresh_token":"REFRESH_TOKEN",    
        //"openid":"OPENID",    
        //"scope":"SCOPE" } 
        return $json_value;
    }

    //get user info
    $req_url = t(
        variable_get('get oauth2 user info'),
        array(
            '@ACCESS_TOKEN' => $json_value->access_token,
            '@OPENID' => $json_value->openid,
        )
    );

    $result = wechat_php_curl_https_get($req_url);
    if ($result == Null) {
        watchdog($watchdog_title, 'error: get user info return null in @line line:@filename',
        array(
        '@line' => __LINE__,
        '@filename' => __FILE__,
        ),
        $severity = WATCHDOG_ERROR);
        return null;
    }

    $json_value = json_decode($result);
    if(isset($json_value->errcode)){
        watchdog($watchdog_title, 'can not get wechat user info code: @error and errmsg: @errmsg at @line in @filename',
            array(
            '@error' => $json_value->errcode,
            '@errmsg' => $json_value->errmsg,
            '@line' => __LINE__,
            '@filename' => __FILE__,
            ),
            $severity = WATCHDOG_ERROR);

        return null;
    }

//reuturn value

//{"openid":" OPENID",  
// "nickname": NICKNAME,   
// "sex":"1",   
// "province":"PROVINCE"   
// "city":"CITY",   
// "country":"COUNTRY",    
// "headimgurl":    "http://wx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ
//4eMsv84eavHiaiceqxibJxCfHe/46",  
//"privilege":[ "PRIVILEGE1" "PRIVILEGE2"     ],    
// "unionid": "o6_bmasdasdsad6_2sgVt7hMZOPfL" 
//} 
    return $json_value;
}


/**
 * End of wechat api module
 */
