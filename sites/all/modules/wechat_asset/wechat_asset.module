<?php

define('LOGIN_QRCODE_RAND_MAX', 100000);
define('QRCODE_SUBSCRIBE_PREFIX', 'qrscene_');
define('OAUTH2_STATE', '100');


/**
 * Baidu map js api
 */
define('BD_AMAP_JS_KEY', 'HzeYY8ADmORLyqfZey5Z042awEvo4VFD');
define('BD_AMAP_JS_REST_API', 'https://api.map.baidu.com/api?v=2.0');

/**
 * amap js api
 */
define('AMAP_JS_KEY', 'cd09ada094d922e6129c7a1455e719be');
define('AMAP_JS_REST_API', 'https://webapi.amap.com/maps?v=1.4.1');
define('AMAP_UI_COMPONENTS', 'https://webapi.amap.com/ui/1.0/main.js');

/**
 * wechat js url
 */
define('WECHAT_JS', 'https://res.wx.qq.com/open/js/jweixin-1.2.0.js');

/**
 * wechat mobile url for all mobile module
 **/
define('WECHAT_MOBILE_URL', 'wechat-mobile');

/**
 * define inline js
 **/
define('MOBILE_INLINE_JS', '
    function isMobile() {
        try{ document.createEvent("TouchEvent"); return true; }
        catch(e){ return false; }
    }

    if (!isMobile()) {
        //window.location.replace("https://dld.dreamland360.com/content/403-拒绝访问");
    }
    '
);

/**
 * hook_permission()
 */
function wechat_asset_permission() {
  return array(
    'wechat asset module permission' => array(
      'title' => t('Access wechat asset module'),
      'description' => t('包好微信开发的所有CSS JS 和常量等公共资源'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function wechat_asset_menu(){
    //wechat js sdk api for all module
    $items[WECHAT_MOBILE_URL . '/wechat-js-sdk-config'] = array(
        'type' => MENU_CALLBACK,
        'description' => t('wechat js configure api'),
        'page callback' => 'wechat_js_sdk_config',
        'access callback' => TRUE,  //anyone can access by ajax
        'file' => 'wechat_js_sdk_config.inc'
    );

    return $items;
}

/**
 * hook_css_array()
 * @return
 * common css
 **/
function wechat_asset_css_array() {
    global $base_url;
    return array (
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/css/bootstrap.min.css',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/css/material-design-iconic-font.min.css',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/css/jquery-confirm.min.css',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/css/loading_gif.css',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/css/progressBar.css'
    );
}

/**
 * hook_base_js_array()
 * @return
 * only bootstrap and jquery 
 **/
function wechat_asset_base_js_array() {
    global $base_url;
    return array (
        WECHAT_JS,
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery-3.2.1.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/bootstrap.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery.ajax-retry.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery-confirm.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/mobile_plugin_api.js',
    );
}
/**
 * hook_js_map_array()
 * @return
 * common js 
 **/
function wechat_asset_js_map_array() {
    global $base_url;
    return array (
        AMAP_JS_REST_API . '&key=' . AMAP_JS_KEY,   //amap javascript api
        AMAP_UI_COMPONENTS, //amap UI components
        WECHAT_JS,
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery-3.2.1.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/bootstrap.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery.ajax-retry.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/jquery-confirm.min.js',
        $base_url . '/' . drupal_get_path('module', 'wechat_asset') . '/js/mobile_plugin_api.js',
    );
}

/**
 * hook_subscribe_user($postArray)
 **/
function wechat_asset_subscribe_user($postArray) {

    $openID = $postArray['FromUserName'];
    $md5ID = md5($openID);

    //create user and wechat profile
    $uid = wechat_asset_check_userid_exists($openID);
    if ( !$uid ) {    //new user
        //set up the user fields
        $fields = array(
            'name' => 'tmp_' . $md5ID,
            'mail' => 'tmp@example.com',
            'pass' => strrev($md5ID),
            'status' => 1,
            'init' => 'email address',
            'signature_format' => 'full_html',
            'timezone' => date_default_timezone()
            //'roles' => array(DRUPAL_AUTHENTICATED_RID => TRUE), //authenticated user
        );

        $fields['field_wechat_openid'][LANGUAGE_NONE][0]['value'] = $openID;
        $fields['field_openid_md5'][LANGUAGE_NONE][0]['value'] = $md5ID;
        $fields['field_wechat_subscribe'][LANGUAGE_NONE][0]['value'] = 1;  //from wechat subscribe
        $fields['field_subscribe_time'][LANGUAGE_NONE][0]['value'] = time();  //from wechat subscribe time

        //the first parameter is left blank so a new user is created
        $account = user_save('', $fields);
        if ( !$account ) {
            watchdog(__FUNCTION__,
                'Can not create user for open id = @openid',
                array('@openid' => $openID),
                $severity = WATCHDOG_ERROR
            );
            return NULL;
        }

        return $account->uid;

    } else {    //old user change subscribe
        $wrapper = entity_metadata_wrapper('user', $uid);  //use foreach for entity_load
        $wrapper->field_wechat_subscribe->set(1); //change to subscribe
        $wrapper->save();
        return $uid;
    }

}

/**
 * hook_unsubscribe_user($postArray)
 **/
function wechat_asset_unsubscribe_user($postArray) {

    $openID = $postArray['FromUserName'];
    $time = $postArray['CreateTime'];

    //create user and wechat profile
    $uid = wechat_asset_check_userid_exists($openID);
    if ( $uid ) {    //find user
        $wrapper = entity_metadata_wrapper('user', $uid);  //use foreach for entity_load
        $wrapper->field_wechat_subscribe->set(0); //change to unsubscribe
        $wrapper->field_unsubscribe_time->set($time); //set to unsubscribe time
        $wrapper->save();

    } else {
        watchdog(__FUNCTION__,
            'Can not unsubscribe user for open id = @openid',
            array('@openid' => $openID),
            $severity = WATCHDOG_ERROR
        );
    }

}

/**
 * hook_check_userid_exists($openID = "", $md5ID = "")
 **/
function wechat_asset_check_userid_exists($openID = "", $md5ID = "") {

    if ($openID == "" && $md5ID == "") {
        watchdog(__FUNCTION__, ' openID and md5ID all empty', $severity = WATCHDOG_ERROR);
        return null;
    }

    $query = new EntityFieldQuery();

    if ( !empty($openID) ) {
        $results = $query->entityCondition('entity_type', 'user')
            ->fieldCondition('field_wechat_openid', 'value', $openID, '=')
            ->execute();

        if (empty($results)) {
              return null;     //can't find user account, ok
        }
    } else {
        $results = $query->entityCondition('entity_type', 'user')
            ->fieldCondition('field_openid_md5', 'value', $md5ID, '=')
            ->execute();

        if (empty($results)) {
              return null;     //can't find user account, ok
        }
    }

    if (count($results['user']) == 1) {
        $tmp = current($results['user']);
        return $tmp->uid;   //ok
    }

    if (count($results['user']) > 1) {
        watchdog(__FUNCTION__, 'check_userid_exists. Have multiple user account at @line in @filename',
            array(
                '@line' => __LINE__,
                '@filename' => __FILE__,
            ),
            $severity = WATCHDOG_ERROR
        );
        exit('found open id has multiple user account');    //critical error, shut down php script
    }

    return null;
}

/**
 * hook_check_openid_exists($uid)
 **/
function wechat_asset_check_openid_exists($uid) {

    if ($uid == '' || $uid == null) {
        return null;
    }

    $wrapper = entity_metadata_wrapper('user', $uid);  //use foreach for entity_load

    $openid = $wrapper->field_wechat_openid->value();
    if (empty($openid) || $openid == '' || $openid == null) {
        return null;
    }

    return $openid;
}

/**
 * hook call for hook_wechat_welcome_news($postArray)
 **/
function wechat_asset_wechat_welcome_news($postArray) {

/**
 *  $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'dld_welcome_page')
        ->propertyCondition('status', NODE_PUBLISHED);

    $result = $query->execute();

    $items = array();
    if (!empty($result)) {

        foreach ($result['node'] as $nid => $node) {
            $node_wrapper = entity_metadata_wrapper('node', $nid);
            $item_ref = $node_wrapper->field_article_entity_ref->value();
            foreach ($item_ref as $key => $ref_node) {
                $item_wrapper = entity_metadata_wrapper('node', $ref_node->nid);
                $items[$key]['Title'] = $item_wrapper->title->value();
                $items[$key]['Description'] = $item_wrapper->field_article_description->value();
                $items[$key]['PicUrl'] = file_create_url($item_wrapper->field_articl_pic_url->value()['uri']);
                $items[$key]['Url'] = $item_wrapper->field_article_url->value();
            }
        }

        $xml_header =
           '<ToUserName><![CDATA[%s]]></ToUserName>
           <FromUserName><![CDATA[%s]]></FromUserName>
           <CreateTime>%s</CreateTime>
           <MsgType><![CDATA[news]]></MsgType>
           <ArticleCount>%s</ArticleCount>
           <Articles>';

        $item_tpl =
            '<item>
            <Title><![CDATA[%s]]></Title>
            <Description><![CDATA[%s]]></Description>
            <PicUrl><![CDATA[%s]]></PicUrl>
            <Url><![CDATA[%s]]></Url>
            </item>';

        $item_str = '';
        foreach ($items as $key => $item) {
            $item_str .= sprintf($item_tpl, $item['Title'], $item['Description'], $item['PicUrl'], $item['Url']);
        }

        $ToUserName = $postArray['FromUserName']; //user open id
        $FromUserName = $postArray['ToUserName'];//wechat server id
        $time = time();
        $header = sprintf($xml_header, $ToUserName, $FromUserName, $time, count($items));

        $result = '<xml>' . $header . $item_str . '</Articles></xml>';

    } else {
 **/

    //no welcome node
    $xml_header = '
    <ToUserName><![CDATA[%s]]></ToUserName>
    <FromUserName><![CDATA[%s]]></FromUserName>
    <CreateTime>%s</CreateTime>
    <MsgType><![CDATA[text]]></MsgType>
    <Content><![CDATA[%s]]></Content>
    ';

    $ToUserName = $postArray['FromUserName']; //user open id
    $FromUserName = $postArray['ToUserName'];//wechat server id
    $time = time();
    $header = sprintf($xml_header, $ToUserName, $FromUserName, $time, '欢迎加入梦乡网!');

    return $result = '<xml>' . $header . '</xml>';
}

/**
 * Implement hook_scan_subscribe_event($eventKey, $postArray)
 **/
function wechat_asset_scan_subscribe_event($eventKey, $postArray) {

    watchdog(__FUNCTION__, '$eventKey @data', array('@data' => $eventKey));

    return '';  //if return 'next', then other following module hook will stop
}
/**
 * Implements hook_scan_msg_event($eventkey, $postArray)
 **/
function wechat_asset_scan_msg_event($eventkey, $postArray) {
    watchdog(__FUNCTION__, '$eventKey <pre>@data</pre>', array('@data' => print_r($eventkey, TRUE)));
}
 

/**
 * End of wechat asset module
 */
